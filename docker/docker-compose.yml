    version: '3.3'

    services:
      postgres: 
        image: debezium/postgres
        container_name: postgres
        hostname: postgres
        ports: ["5432:5432"]
        networks:
            - connect_network

      zookeeper:
        image: debezium/zookeeper
        container_name: zookeeper
        hostname: zookeeper
        ports: ["2181:2181", "2888:2888", "3888:3888"]
        networks:
            - connect_network

      kafka:
        image: debezium/kafka
        container_name: kafka
        hostname: kafka
        ports: ["9092:9092"]
        # depends_on:
        #     - zookeeper
        networks:
            - connect_network
        environment:
          ZOOKEEPER_CONNECT: zookeeper:2181

      connect:
        image: debezium/connect
        container_name: connect
        hostname: connect
        ports: ["8083:8083"]
        # depends_on:
        #     - zookeeper
        #     - kafka
        #     - postgres
        networks:
            - connect_network
        environment:
          ZOOKEEPER_CONNECT: zookeeper:2181
          GROUP_ID: 1
          CONFIG_STORAGE_TOPIC: my-connect-configs
          OFFSET_STORAGE_TOPIC: my-connect-offsets
          BOOTSTRAP_SERVERS: kafka:9092

      # watcher:
      #   image: debezium/kafka
      #   container_name: watcher
      #   environment:
      #     ZOOKEEPER_CONNECT: zookeeper:2181
      #   command: ["watch-topic", "-a", "-k", "dbserver1.public.dumb_table"] 
      #   networks:
      #       - connect_network

    networks:
      connect_network:
        driver: bridge

      # zookeeper:
      #   image: confluentinc/cp-zookeeper
      #   container_name: zookeeper
      #   hostname: zookeeper
      #   ports: ["2181:2181"]
      #   environment:
      #     ZOOKEEPER_CLIENT_PORT: 2181
      #     ZOOKEEPER_TICK_TIME: 2000

      # broker:
      #   image: confluentinc/cp-enterprise-kafka
      #   container_name: broker
      #   hostname: broker
      #   depends_on:
      #     - zookeeper
      #   ports: ["9092:9092"]
      #   environment:
      #     KAFKA_BROKER_ID: 1
      #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      #     KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:9092'
      #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      #     KAFKA_LOG4J_ROOT_LOGLEVEL: ERROR

      # schema_registry:
      #   image: confluentinc/cp-schema-registry
      #   container_name: schema
      #   hostname: schema_registry
      #   depends_on:
      #     - zookeeper
      #     - broker
      #   ports: ["8081:8081"]
      #   environment:
      #     SCHEMA_REGISTRY_HOST_NAME: schema_registry
      #     SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'

      # connect:
      #   image: confluentinc/cp-kafka-connect
      #   container_name: connect
      #   hostname: connect
      #   depends_on:
      #     - zookeeper
      #     - broker
      #     - schema_registry        
      #   ports: ["8083:8083"]
      #   environment:
      #     CONNECT_BOOTSTRAP_SERVERS: 'broker:9092'
      #     CONNECT_REST_ADVERTISED_HOST_NAME: connect
      #     CONNECT_REST_PORT: 8089
      #     CONNECT_GROUP_ID: compose-connect-group
      #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      #     CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      #     CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      #     CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL:  'http://schema_registry:8081'
      #     CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      #     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema_registry:8081'
      #     CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      #     CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      #     CONNECT_LOG4J_ROOT_LOGLEVEL: ERROR
      #     CONNECT_LOG4J_LOGGERS=org.reflections: ERROR
      #     CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      
      # postgres: 
      #   image: clkao/postgres-plv8
      #   container_name: postgres-marten
      #   environment:
      #     - postgres/variables.env
      #   ports: ["5432:5432"]
