    version: '3.3'

    services:
      postgres: 
        build:   
            context: postgres
            dockerfile: DOCKERFILE
        container_name: postgres
        hostname: postgres
        ports: ["5432:5432"]
        networks:
          - connect_network
        environment:
          POSTGRES_DB: inventory
        #volumes:
        #  - ./postgres/init.sql:/docker-entrypoint-initdb.d/1-schema.sql
        healthcheck:
          test: "pg_isready -U postgres"
          interval: 10s
          timeout: 5s
          retries: 5

      elastic:
        image: docker.elastic.co/elasticsearch/elasticsearch:5.5.2
        container_name: elastic
        ports:
        - "9200:9200"
        environment:
          http.host: 0.0.0.0
          transport.host: 127.0.0.1
          xpack.security.enabled: "false"
        networks:
            - connect_network

      zookeeper:
        image: debezium/zookeeper
        container_name: zookeeper
        hostname: zookeeper
        ports: ["2181:2181", "2888:2888", "3888:3888"]
        networks:
            - connect_network

      kafka:
        image: debezium/kafka
        container_name: kafka
        hostname: kafka
        ports: ["9092:9092"]
        depends_on:
          - zookeeper
        networks:
          - connect_network
        environment:
          ZOOKEEPER_CONNECT: zookeeper:2181
          ADVERTISED_HOST_NAME: kafka
          KAFKA_ADVERTISED_HOSTNAME: 127.0.0.1

      connect:
        build:   
            context: connect
            dockerfile: DOCKERFILE
        container_name: connect
        hostname: connect
        ports: ["8083:8083"]
        depends_on:
          - zookeeper
          - kafka
          - postgres
        command: dockerize -wait tcp://kafka:9092 -wait tcp://postgres:5432 -timeout 2m -wait http://elastic:9200 -timeout 2m /docker-entrypoint.sh start
        networks:
          - connect_network
        environment:
          ZOOKEEPER_CONNECT: zookeeper:2181
          GROUP_ID: 1
          CONFIG_STORAGE_TOPIC: my-connect-configs
          OFFSET_STORAGE_TOPIC: my-connect-offsets
          BOOTSTRAP_SERVERS: kafka:9092
        volumes:
            - "./connect/scripts:/scripts"
        healthcheck:
          test: "curl -f connect:8083/connectors/ && sh /scripts/init.sh"
          interval: 20s
          timeout: 120s
          retries: 6
      
      webapp-with-marten:
        image: oskardudycz/eventsourcing.netcore
        container_name: webapp-with-marten
        hostname: webapp-with-marten
        ports: ["5000:5000"]
        healthcheck:
          test: "curl -f webapp-with-marten:500/swagger/"
          interval: 20s
          timeout: 120s
          retries: 6
        depends_on:
          - postgres
        command: dockerize -wait -wait tcp://postgres:5432 -timeout 2m && /docker-entrypoint.sh start
        networks:
          - connect_network

    networks:
      connect_network:
        driver: bridge