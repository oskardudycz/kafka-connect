    version: '3.3'

    services:
      #######################################################
      #  POSTGRES with Debezium and PLV8
      #######################################################
      postgres: 
        image: debezium/postgres
        environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=Password12!
        container_name: postgres
        hostname: postgres
        ports: ["5432:5432"]
        networks:
          - connect_network
        # environment:
        #   POSTGRES_DB: postgres
        volumes:
          - ./postgres/init.sql:/docker-entrypoint-initdb.d/1-schema.sql
        healthcheck:
          test: "pg_isready -U postgres"
          interval: 10s
          timeout: 5s
          retries: 5
      
      #######################################################
      #  PGAdmin UI for postgres
      #######################################################
      pgadmin:
        image: dpage/pgadmin4
        container_name: pgadmin_container
        environment:
          PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@pgadmin.org}
          PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
        ports:
            - "${PGADMIN_PORT:-5050}:80"
        networks:
            - connect_network

      #######################################################
      #  ElasticSearch
      #######################################################
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:6.3.0
        container_name: elasticsearch
        ports:
        ports:
          - "9200:9200"
          - "9300:9300"
        environment:
          http.host: 0.0.0.0
          transport.host: 127.0.0.1
          xpack.security.enabled: "false"
        networks:
          - connect_network
      
      #######################################################
      #  Kibana - UI for ElasticSearch
      #######################################################
      kibana:
        image: docker.elastic.co/kibana/kibana:6.3.0
        ports:
          - "5601:5601"
        environment:
          xpack.security.enabled: "false"
        networks:
          - connect_network
        depends_on:
          - elasticsearch

      #######################################################
      #  Zookeeper
      #######################################################
      zookeeper:
        image: debezium/zookeeper
        container_name: zookeeper
        hostname: zookeeper
        ports: ["2181:2181", "2888:2888", "3888:3888"]
        networks:
            - connect_network

      #######################################################
      #  Kafka
      #######################################################
      kafka:
        image: debezium/kafka
        container_name: kafka
        hostname: kafka
        ports: ["9092:9092"]
        depends_on:
          - zookeeper
        networks:
          - connect_network
        environment:
          ZOOKEEPER_CONNECT: zookeeper:2181
          ADVERTISED_HOST_NAME: kafka
          KAFKA_ADVERTISED_HOSTNAME: 127.0.0.1
      
      #######################################################
      #  Avro Schema Registry
      #######################################################
      schema_registry:
        image: confluentinc/cp-schema-registry
        container_name: schema_registry
        hostname: schema_registry
        ports:
          - 8181:8181
          - 8081:8081
        depends_on:
          - zookeeper
        networks:
          - connect_network
        environment:
          SCHEMA_REGISTRY_HOST_NAME: schema_registry
          SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
          SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
          SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
          SCHEMA_LOG4J_ROOT_LOGLEVEL: 'ERROR'
          SCHEMA_TOOLS_LOG4J_LOGLEVEL: 'ERROR'

      #######################################################
      #  Kafka Rest
      #######################################################
      kafka_rest:
        image: confluentinc/cp-kafka-rest:4.1.1
        hostname: kafka_rest
        container_name: kafka_rest
        ports:
          - "8082:8082"
        depends_on:
          - schema_registry
        networks:
          - connect_network
        environment:
          KAFKA_REST_BOOTSTRAP_SERVERS: kafka:9092
          KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081
          KAFKA_REST_HOST_NAME: kafka_rest
          KAFKA_REST_LISTENERS: http://0.0.0.0:8082

      #######################################################
      #  Kafka Topic UI- for viewing topics messages
      #######################################################
      kafka_topics_ui:
        image: landoop/kafka-topics-ui
        hostname: kafka-topics-ui
        ports:
          - "8000:8000"
        environment:
          # Required. Instructs the UI where it can find the Kafka REST Proxy.
          KAFKA_REST_PROXY_URL: "http://kafka_rest:8082/"
          # This instructs the docker image to use Caddy to proxy traffic to kafka-topics-ui.
          PROXY: "true"
          # kafka-topics-ui relies upon Kafka REST.
          # This will instruct docker to wait until those services are up
          # before attempting to start kafka-topics-ui.
        networks:
          - connect_network
        depends_on:
          - kafka_rest

      #######################################################
      #  Kafka Connect
      #######################################################
      connect:
        build:   
            context: connect
            dockerfile: DOCKERFILE
        container_name: connect
        hostname: connect
        ports: ["8083:8083"]
        depends_on:
          - zookeeper
          - kafka
          - postgres
          - schema_registry
        # Wait until Kafka, Postgres, ElasticSearch are ready
        command: dockerize -wait tcp://kafka:9092 -timeout 2m -wait tcp://postgres:5432 -timeout 2m -wait http://elasticsearch:9200 -timeout 2m -wait http://schema_registry:8081 -timeout 2m /docker-entrypoint.sh start
        networks:
          - connect_network
        environment:
          ZOOKEEPER_CONNECT: zookeeper:2181
          GROUP_ID: 1
          CONFIG_STORAGE_TOPIC: my-connect-configs
          OFFSET_STORAGE_TOPIC: my-connect-offsets
          BOOTSTRAP_SERVERS: kafka:9092
        volumes:
            - "./connect/scripts:/scripts"
        healthcheck:
          test: "curl -f connect:8083/connectors/"
          interval: 20s
          timeout: 120s
          retries: 6

      #######################################################
      #  Setup Kafka Connectors
      #######################################################
      connectors-setup:
        image: jwilder/dockerize
        container_name: connectors-setup
        hostname: connectors-setup
        volumes:
            - "./connect/scripts:/scripts"
        # setup script needs to run after Kafka Conect is working
        command: dockerize -wait http://webapp-with-marten:5000/swagger -timeout 3m -wait http://connect:8083/connectors/ -timeout 3m sh /scripts/init.sh
        depends_on:
          - connect
        networks:
          - connect_network
        
      #######################################################
      #  .NET Core WebApi with Marten
      #######################################################
      webapp-with-marten:
        build:
          dockerfile: DOCKERFILE
          context: Marten.WebApi
        container_name: webapp-with-marten
        hostname: webapp-with-marten
        ports: ["5000:5000"]
        healthcheck:
          test: "curl -f webapp-with-marten:5000/swagger/"
          interval: 20s
          timeout: 120s
          retries: 6
        depends_on:
          - postgres
        # Wait until Postgres is ready
        command: dockerize -wait tcp://postgres:5432 -timeout 2m /docker-entrypoint.sh start
        networks:
          - connect_network

    #######################################################
    #  Shared Network
    #######################################################
    networks:
      connect_network:
        driver: bridge